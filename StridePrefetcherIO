import random
import chisel3.iotesters.PeekPokeTester

class StridePrefetcherTester(dut: StridePrefetcher) extends PeekPokeTester(dut) {

  // Define test method for continuous memory access sequence
  def testContinuousAccess(): Unit = {
    // Set prefetcher parameters
    poke(dut.io.stride, 1)
    poke(dut.io.prefetch_depth, 2)

    // Generate memory access trace with continuous addresses
    val trace = Seq.tabulate(10)(i => i)

    // Send trace to prefetcher and verify results
    trace.foreach(addr => {
      poke(dut.io.addr_in, addr)
      step(1)
      expect(dut.io.addr_out, addr)
      expect(dut.io.prefetch1, addr + 1)
      expect(dut.io.prefetch2, addr + 2)
    })
  }

  // Define test method for discontinuous memory access sequence
  def testDiscontinuousAccess(): Unit = {
    // Set prefetcher parameters
    poke(dut.io.stride, 2)
    poke(dut.io.prefetch_depth, 2)

    // Generate memory access trace with discontinuous addresses
    val trace = Seq.fill(10)(random.nextInt(10))

    // Send trace to prefetcher and verify results
    trace.foreach(addr => {
      poke(dut.io.addr_in, addr)
      step(1)
      expect(dut.io.addr_out, addr)
      expect(dut.io.prefetch1, addr + 2)
      expect(dut.io.prefetch2, addr + 4)
    })
  }

  // Run tests
  testContinuousAccess()
  testDiscontinuousAccess()
}
