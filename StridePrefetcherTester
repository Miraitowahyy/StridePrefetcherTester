import chisel3._
import chisel3.util._
import chisel3.iotesters._

class BenchmarkTest extends Module {
  val io = IO(new Bundle {
    val memAddr = Input(UInt(32.W))
    val memData = Output(UInt(32.W))
  })

  // Memory module
  val mem = Mem(1024, UInt(32.W))
  io.memData := mem(io.memAddr)

  // Stride prefetcher
  val stridePrefetcher = Module(new StridePrefetcher)
  stridePrefetcher.io.memAddr := io.memAddr

  // Record prefetcher prediction results
  val correctPredictions = RegInit(0.U(32.W))
  val totalPredictions = RegInit(0.U(32.W))
  when(stridePrefetcher.io.prefetch.valid) {
    totalPredictions := totalPredictions + 1.U
    when(mem(stridePrefetcher.io.prefetch.bits.addr).valid) {
      correctPredictions := correctPredictions + 1.U
    }
  }

  // Record memory access results
  val totalAccesses = RegInit(0.U(32.W))
  val prefetchAccesses = RegInit(0.U(32.W))
  when(io.memAddr.valid) {
    totalAccesses := totalAccesses + 1.U
    when(stridePrefetcher.io.prefetch.valid) {
      prefetchAccesses := prefetchAccesses + 1.U
    }
  }
}

class StridePrefetcher extends Module {
  val io = IO(new Bundle {
    val memAddr = Input(UInt(32.W))
    val prefetch = Output(Valid(UInt(32.W)))
  })

  // Stride prefetcher parameters
  val stride = RegInit(0.U(32.W))
  val lastAddr = RegInit(0.U(32.W))

  // Prefetch address calculation
  val nextAddr = lastAddr + stride
  io.prefetch.bits := nextAddr
  io.prefetch.valid := true.B

  // Update stride and last address
  when(io.memAddr.valid) {
    when(stride === 0.U) {
      stride := io.memAddr - lastAddr
    } .otherwise {
      when(io.memAddr === nextAddr) {
        stride := io.memAddr - lastAddr
      } .otherwise {
        stride := 0.U
      }
    }
    lastAddr := io.memAddr
  }
}

object BenchmarkTestDriver extends App {
  iotesters.Driver.execute(args, () => new BenchmarkTest) {
    c => new PeekPokeTester(c) {
      // Memory access pattern
      for (i <- 0 until 1000) {
        poke(c.io.memAddr, i.U)
        expect(c.io.memData, i.U)
      }
      // Print prefetcher prediction results
      val correctPredictions = peek(c.correctPredictions)
      val totalPredictions = peek(c.totalPredictions)
      println(s"Prefetcher prediction accuracy: ${correctPredictions.toDouble / totalPredictions.toDouble}")
      // Print prefetcher coverage results
      val totalAccesses = peek(c.totalAccesses)
      val prefetchAccesses = peek(c.prefetchAccesses)
      println(s"Prefetcher coverage: ${prefetchAccesses.toDouble / totalAccesses.toDouble}")
    }
  }
}
